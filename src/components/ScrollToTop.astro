---
// Możesz przekazać propsy do customizacji
interface Props {
  threshold?: number;
  size?: 'sm' | 'md' | 'lg';
  position?: 'bottom-right' | 'bottom-left';
  showProgress?: boolean;
}

const { 
  threshold = 300, 
  size = 'md', 
  position = 'bottom-right',
  showProgress = true 
} = Astro.props;

const sizeClasses = {
  sm: 'w-12 h-12',
  md: 'w-14 h-14', 
  lg: 'w-16 h-16'
};

const positionClasses = {
  'bottom-right': 'bottom-8 right-8',
  'bottom-left': 'bottom-8 left-8'
};
---

<style define:vars={{ threshold, showProgress: showProgress.toString() }}>
@keyframes levitate {
  0% {
    transform: translateY(0);
    box-shadow: 0 4px 16px rgba(56,189,248,0.25), 0 2px 8px rgba(0,0,0,0.10);
  }
  50% {
    transform: translateY(-8px);
    box-shadow: 0 12px 36px rgba(56,189,248,0.35), 0 8px 24px rgba(0,0,0,0.12);
  }
  100% {
    transform: translateY(0);
    box-shadow: 0 4px 16px rgba(56,189,248,0.25), 0 2px 8px rgba(0,0,0,0.10);
  }
}

@keyframes slideInUp {
  from {
    transform: translateY(100px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideOutDown {
  from {
    transform: translateY(0);
    opacity: 1;
  }
  to {
    transform: translateY(100px);
    opacity: 0;
  }
}

.scroll-to-top {
  position: fixed;
  width: 56px;
  height: 56px;
  background: linear-gradient(135deg, #38bdf8 0%, #0ea5e9 100%);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 16px rgba(56,189,248,0.25), 0 2px 8px rgba(0,0,0,0.10);
  cursor: pointer;
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  z-index: 1000;
  border: 2px solid rgba(255,255,255,0.2);
  animation: levitate 3s ease-in-out infinite;
  backdrop-filter: blur(10px);
  user-select: none;
  -webkit-tap-highlight-color: transparent;
}

.scroll-to-top.visible {
  opacity: 1;
  visibility: visible;
  pointer-events: auto;
  animation: slideInUp 0.4s ease-out, levitate 3s ease-in-out 0.4s infinite;
}

.scroll-to-top.hiding {
  animation: slideOutDown 0.3s ease-in forwards;
}

.scroll-to-top:hover {
  transform: translateY(-8px) scale(1.1);
  box-shadow: 0 16px 48px rgba(56,189,248,0.4), 0 12px 32px rgba(0,0,0,0.15);
  background: linear-gradient(135deg, #0ea5e9 0%, #38bdf8 100%);
  border-color: rgba(255,255,255,0.4);
}

.scroll-to-top:active {
  transform: translateY(-4px) scale(1.05);
  transition: all 0.1s ease-out;
}

/* Progress ring styles */
.progress-ring {
  position: absolute;
  top: -3px;
  left: -3px;
  transform: rotate(-90deg);
  opacity: 0.8;
}

.progress-ring__circle {
  transition: stroke-dashoffset 0.1s ease-out;
  stroke: rgba(255,255,255,0.3);
  stroke-width: 2;
  fill: transparent;
}

.progress-ring__progress {
  stroke: rgba(255,255,255,0.9);
  stroke-width: 2;
  fill: transparent;
  stroke-linecap: round;
}

/* Responsive design */
@media (max-width: 768px) {
  .scroll-to-top {
    width: 48px;
    height: 48px;
    bottom: 1.5rem;
    right: 1.5rem;
  }
  
  .scroll-to-top svg {
    width: 20px;
    height: 20px;
  }
}

@media (prefers-reduced-motion: reduce) {
  .scroll-to-top {
    animation: none;
  }
  
  .scroll-to-top:hover {
    transform: none;
  }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  .scroll-to-top {
    border-color: rgba(255,255,255,0.1);
    box-shadow: 0 4px 16px rgba(56,189,248,0.2), 0 2px 8px rgba(0,0,0,0.3);
  }
  
  .scroll-to-top:hover {
    box-shadow: 0 16px 48px rgba(56,189,248,0.3), 0 12px 32px rgba(0,0,0,0.4);
  }
}
</style>

<div 
  id="scrollToTop" 
  class={`scroll-to-top ${sizeClasses[size]} ${positionClasses[position]}`}
  aria-label="Powrót na górę" 
  title="Powrót na górę"
  role="button"
  tabindex="0"
>
  {showProgress && (
    <svg class="progress-ring" width="62" height="62">
      <circle
        class="progress-ring__circle"
        cx="31"
        cy="31"
        r="28"
        stroke-dasharray="175.93"
        stroke-dashoffset="175.93"
      />
      <circle
        class="progress-ring__progress"
        cx="31"
        cy="31"
        r="28"
        stroke-dasharray="175.93"
        stroke-dashoffset="175.93"
        id="progressCircle"
      />
    </svg>
  )}
  
  <svg 
    width="24" 
    height="24" 
    viewBox="0 0 24 24" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg" 
    aria-hidden="true"
    class="transition-transform duration-300 ease-out"
  >
    <path 
      d="M12 19V5M12 5L5 12M12 5L19 12" 
      stroke="currentColor" 
      stroke-width="2.5" 
      stroke-linecap="round" 
      stroke-linejoin="round"
    />
  </svg>
</div>

<script>
if (typeof window !== 'undefined') {
  const btn = document.getElementById('scrollToTop');
  const progressCircle = document.getElementById('progressCircle');
  const threshold = parseInt(document.documentElement.style.getPropertyValue('--threshold') || '300');
  const showProgress = document.documentElement.style.getPropertyValue('--showProgress') === 'true';
  
  if (btn) {
    let isVisible = false;
    let hideTimeout: number | undefined;
    
    // Calculate scroll progress
    function updateProgress(): void {
      if (!showProgress || !progressCircle) return;
      
      const scrollTop = window.scrollY;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = scrollTop / docHeight;
      const circumference = 2 * Math.PI * 28; // r = 28
      const offset = circumference - (scrollPercent * circumference);
      
      progressCircle.style.strokeDashoffset = offset.toString();
    }
    
    // Smooth scroll with easing
    function smoothScrollToTop(): void {
      const start = window.scrollY;
      const startTime = performance.now();
      const duration = Math.min(1000, Math.max(300, start / 3)); // Dynamic duration
      
      function animate(currentTime: number): void {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing function (ease-out-cubic)
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        const currentPosition = start * (1 - easeProgress);
        
        window.scrollTo(0, currentPosition);
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      }
      
      requestAnimationFrame(animate);
    }
    
    // Optimized scroll handler with throttling
    let ticking = false;
    function handleScroll(): void {
      if (!ticking) {
        requestAnimationFrame(() => {
          const scrollY = window.scrollY;
          const shouldShow = scrollY > threshold;
          
          if (shouldShow !== isVisible) {
            isVisible = shouldShow;
            
            if (shouldShow) {
              if (hideTimeout) clearTimeout(hideTimeout);
              btn.classList.remove('hiding');
              btn.classList.add('visible');
            } else {
              btn.classList.add('hiding');
              hideTimeout = window.setTimeout(() => {
                btn.classList.remove('visible', 'hiding');
              }, 300);
            }
          }
          
          updateProgress();
          ticking = false;
        });
        ticking = true;
      }
    }
    
    // Event listeners
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // Click and keyboard handlers
    function scrollToTop(): void {
      // Haptic feedback on mobile
      if ('vibrate' in navigator) {
        navigator.vibrate(50);
      }
      
      smoothScrollToTop();
      
      // Analytics event (if available)
      if (typeof (window as any).gtag !== 'undefined') {
        (window as any).gtag('event', 'scroll_to_top', {
          event_category: 'navigation',
          event_label: 'button_click'
        });
      }
    }
    
    btn.addEventListener('click', scrollToTop);
    
    // Keyboard support
    btn.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        scrollToTop();
      }
    });
    
    // Touch support for better mobile experience
    let touchStartY = 0;
    btn.addEventListener('touchstart', (e: TouchEvent) => {
      touchStartY = e.touches[0].clientY;
    }, { passive: true });
    
    btn.addEventListener('touchend', (e: TouchEvent) => {
      const touchEndY = e.changedTouches[0].clientY;
      const diff = Math.abs(touchStartY - touchEndY);
      
      // Only trigger if it's a tap, not a swipe
      if (diff < 10) {
        scrollToTop();
      }
    }, { passive: true });
    
    // Initialize
    updateProgress();
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (hideTimeout) clearTimeout(hideTimeout);
      window.removeEventListener('scroll', handleScroll);
    });
  }
}
</script>
